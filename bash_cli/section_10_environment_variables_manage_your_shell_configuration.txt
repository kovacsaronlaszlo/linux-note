shell environment is a collection if settings, variables, aliases and configurations
it defines the context in which our programs are run
it thus influences how our programs are being run


what is shell?
# outer layer if the operating system
# it takes commands from the user and translates them into a form that the kernel can understand
# it can also display the result of those commands to the user

# in general:
    > everything that allows th outer world to access the operating system
    > the graphical user interface is always a shell

# command line (shell)
    > the term "shell" only refer to the command line interface (CLI) os an operating system
    > CLI: a text-base interface that allows users to interact with system by typing commands

# thus, "linux shell":
    > this usully only refers to the CLI / "terminal" / "console"

# the linux shell:
    > allows us to work on devices that dont support a graphical user interface (GUI)
    > quite often, its more efficient to use the cli instead of the gui

============================================

using environment variables
# what are environment variable:
    > used to store configuration and settings
    > influence the shell and program behavior

# environment variables are written in uppercase letters
# list variables: 
    - env
# example (to be prefered):
    - echo "${PWD}"
    - echo "${USER}"
    - echo "${PATH}"
# also use:
    - echo "$PATH"
# avoid this:
    - echo $PATH

============================================

Important environment variables:
HOME, PWD, USER

# HOME:
    > stores current users home directory path

# PWD:
    > stores the current working dorectory path
    > for the last directory befor: OLDPWD
    > not to be confused with the command "pwd"!
    > to navigate back the previous directory: cd "${OLDPWD}"

# USER:
    > stores the current users username

============================================

how to set/unset environment variables
# we can use the esport command to create an environment variable:
    > export VAR=value
    > ' means rewrite env variable
# can also overwrite existing variable
    > VAR=new-value

# delete an env varaible
    > unset VAR
    > this is useful for troublechooting and cleaning up of the env

============================================

PATH env variable
# one of the most important
    > stores a list of directories
    > directories searched for executable programs
    > order matters: directories search from left to right
    > multiple directories separated by colons (":")
    > exmaple:
	/home/kovacsaron/.bun/bin:/home/kovacsaron/.nvm/versions/node/v18.20.5/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
    > /usr/bin/cat file.txt

============================================

why we need different paths?
# important definitions:
    > filesystem hierarchy standard: unified standard of where to place files
    > single-user mode: a special way to launch Linux for repairing a broken system - we need access to essential tools
# different paths
    > /bin: essential binaries, that need to be always available
    > /sbin: essential binaries, that are usually executed as rppt, and need to be always available
    > /usr/bin: non-essential binaries, for all useres. could be shared with other computers
    > /usr/sbin: non-essential binaries, usually executed as root. could be shared with other computers
    > /usr/local/bin: non-essential binaries, for all users. specific to his host
    > /usr/local/sbin: non-essential binaries, usually executed as root. specific to this host
#exmaple:
    cat file.txt === /usr/bin/cat file.txt === /bin/cat file.txt

============================================

modifying the PATH variable
# why?
    > we have a separate directory in which we want to install executable files on out system
# usually, want to append a directory to our PATH
    > PATH="${PATH}:/new/path"

troubleshooting PATH issues
# common issues: "command not found"
    > in that case, we need to verify the contents of the variable PATH
    > echo "${PATH}"
    > desired directory should be included
    > order of the entries in PATH must be correct
    > if we need to find a program:
	"which" command (program)

PATH: best practices:
# keep system dorectories at the beginning
# place user-specific directories after system directories
# avoid unnecessary duplication of directories
# minimze the number of directories to improve wearch efficiency
# regularly review and clean up the PATH
# be cautios when modifying the PATH for system-wide changes

============================================

make file executable: chmod +x [my_program]
in this case dont have to use pyrhon to run if the first line looks like this:
	#!/usr/bin/env python3
becasue before run the program the system will use pythone3 to run the program, or can be called shebang

============================================

utilizing environment variables for data transfer into prgrams
# env variables:
    > env variables are not a Bash feature
    > a feature provided by operating system
    > using export keyword to define a new env varaiable
	example: export LOGIN_CONFIG='secret'
    > this will help us understand why they work seamlessly across programs and why they can "cross" those boundaries

# example: available to python
    > env variables are automatically available for all programs that we launch
    > can access them, also in other applications
    > env varaible are often used to pass configuration data to programs
    > such as key, URLs and even passwords
    > if you run your own application, you might also consider passing in the configuration as env variable
    > example python:
	import os
	print(os.environ)
    > to override an env varaible for a specific program, but dont want to change it globaly:
	LOGIN_CONFIG='localhost:3306' python3 env.py
	
============================================

the environment varaible: SHELL
# stores the path to the user's default shell
# it is inherinted just as a normal environment variable
# can be changed the shell env, soo not just use bash but others
	'chsh -s /bin/zsh'
	'chsh -s /bin/bash'
============================================

how can we store our configuration?
# there are amyn different startup files for bash
    > ~/.bash_profile
    > ~/.bash_login
    > ~/.profile
    > ~/.bashrc

	which of those should we put our configuration?

Bash startup mode
# bash can start in various different startup modes:
    > interactive login shell
	- directly log into a computer
	- tty-terminal on my machine / ssh on remote machine
	- switch to tty:
	     @ ctrl+F1 - login screen
	     @ ctrl+F3 - tty interface (the real login in shell)
    > interactive non-login shell:
	- open a terminal on desktop env, or we use "bash" within an existing terminal
    > non-interactive non-login shell:
	- run a ".sh" file, example: "./script.sh"
    > non-interactive login shell
	- very rare. on way would be, if we send a command with ssh to a remote server without starting a shell
	- echo 'command' | ssh server

bash startup files
# interactive login shell
    > /etc/profile
    > first one of:
	- ~/.bash_profile
	- ~/.bash_login
	- ~/.profile

# interactive non-login shell
    > ~/.bashrc

# non-interactive shells (login & non.login)
    > bash looks for an environment varaible BASH_ENV
    > if found, will try to execute this file

# note
    > on MAC, all interactive shells load the files for the lofin-shell

============================================

editing bash startup files with the command-line-editor: nano
open .bashrc file and put this the end of this file
nano ~/.bashrc
# our own code
export TOP_SECRET_TOKEN='top-secret!!!'

if you trying to access this token after you saved and exit the nano, like:
echo "${TOP_SECRET_TOKEN}"

nothing will be shown!
this only be executed whenever a new shell is being started
so if we start a new bash, this env variable would be set, because now this configuration file has been executed
$ bash
$ echo "${TOP_SECRET_TOKEN}"
$ top-secret!!!
but if we exit the inner bash
$ exit
the echo "${TOP_SECRET_TOKEN}" command wont set


we can add access to a bin file we just create in the user like this:
$ mkdir bin
open the .bashrc
$ nano ~/.bashrc
roll the bottom of the file and give this command:
...
# our own code
export TOP_SECRET_TOKEN='top-secret!!!'
PATH="${PATH}:/home/<your_user>/bin"

this is how can we edit our configuration file

============================================
















