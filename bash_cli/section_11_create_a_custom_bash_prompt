customizing shell prompt: PS1
# PS1 environment varible:
	> stands for 'Prompt String 1'
	> defines the appearance of the primary shell prompt
	> highly customizable with escape sequences and special characters
	> enhances user expresiences and workflow when we changes PS1
# lets have a look at what happens when we changes PS1
	& PS1='hello-bash'
	hello-bash
	hello-bashpwd
	/home/user/Desktop
	hello-bash
# PS1 supports various placeholders:
	> Username: \u
	> Hostname: 
		- Up to first '.': \h
		- The complete hostname: \H
	> Current working directory:
		- \w (full path)
		- \W (last directory of the full path)
	> Time in 24-hour format: \t
	> Time in 12-hour format (with am / pm): \@
# example: 
	> PS1='\u@\h:\w$ '
# to set this variable override .bashrc file and copy the code above, than reboot the computer

============================================

Terminal Color control
# terminal hace different abilities
# can tell bash wich abilities should be used by the env varaible:
	> TERM
	$ echo "${TERM}"
	$ xterm-256color
# there are different terminals available:
	> text-only terminals (no colors)
	> terminals, that support 16 different colors
	> terminals, that support 256 different colors (xterm-256color)
# can list the available modes:
	> toe
	$ toe -a

# terminal excape sequences
	> in order to control this terminal, we can send "escape sequences":
		- echo -e "\e[30;40m":
			-- 30: Black foreground
			-- 40: Black background
			-- -e is the excape character
		- echo -e "\e[36;41m":
			-- 36: cyan foreground
			-- 41: red background
	> look into: VGA colors!

============================================

Terminal capabilities
Terminal escape sequences
# we can list ht eterminal capabilities with:
	> infocmp
# we then get a list of supported escape sequences
# create bold text:
	$ echo -e "\e[1mboldtext"
# to reset everything:
	$ echo -e "\e(B\e[m"

============================================

Bash: Command Substition 
# can collect the output of a program and use it:
	$ echo "this is the output:\n$(ls)"
	> what does this line do?
		- $(ls):
			-- executes the command "ls", and collects the output















