Filename expansion
# shell expansion:
	> before executing, the shell "rewrites" and parses the command
	> this happens before the command is being executed

# filename expansion	
	> ls *
	> in this case, the * is being "expanded"
	> for the asterisk, this mean Bash gets the contents of the current directory
	> and passes those items as paramteres to the "ls" command
	> this command print the content of our current folder:
		echo *
	> we can also filter the files that Bash should find for us:
		example:
			- echo *.txt (filter multiple character end with .txt)
			- echo ?.txt (filter one character end with .txt)

============================================

Tilde expansion
# tilde expansion:
	> ls ~
	> this list our home folder
	> by the "~" character, we're using the tilde expansion
	> this character is being expanded to the value of the environment variable HOME
	> test this:
		$ echo ~
	> we could also use it with a plus:
		~+: expands to $PWD
		$ echo ~+

============================================

Variable and Parameter extension '${...}'
Variable expansion:
# the varaible expansion allows us to access a varaible:
	> possible ways to write it:
		$ echo $HOME
		$ echo ${HOME}
		$ echo "$HOME"
		$ echo "${HOME}"
	> Bash rewrites the command for us, and fills in the varaible
	> We should prefer to use double quotes around it
	> We should try use curly braces to make it clear where the variable end:
		$ echo "${HOME}path"
		$ echo "$HOMEpath" (something different)

Shell parameter expansion:
# shell paramter expansion allows us to work with strings
# however, we need to have a varaible first!

# query the lenght of string:
	$ ${#HOME}
# cut out a substring (substring extraction):
	$ ${#HOME:start:length}
# replace sunstring (one time):
	$ ${HOME/pattern/replacement}
# replace sunstring (all occurences):
	$ ${HOME//pattern/replacement} 

============================================

Word splitting
# bash performs word splitting on out input
# this happens, after our command has been (potentially) rewritten by expansions
# example:
	> touch a.txt b.txt
	> this command will be slitted into 3 different words:
		- touch
		- a.txt
		- b.txt
	> the first entry will then be the program (touch)
	> a.txt the first parameter / argument
	> b.txt will be the second paramter / argument
# word splitting will occur at any character that is listed in the varaible IFS
# by default, this is at very space, every tab, and every newline
# sequences of IFS characters are treated as a single delimeter
# tus, this would be equivalent:
	> touch a.txt b.txt
	> touch a.txt		b.txt
# we can disable word splittin by wrapping parts of the command into quotes:
	> touch 'a file.txt'
	> touch "a file.txt"
	> without word splitting:
		- 2 files would have been created ('a' and 'file.txt')
	> word splitting is disabled for character between those quotes

============================================

No Quotes vs, Single Quotes '...' vs. Double Quotes
what do the quotes do?
# whats the difference between the following commands?
	$ echo $PWD/*.txt
	$ echo '$PWD/*.txt'
	$ echo "$PWD/*.txt"
# no quotes:
	> all valiable shell expansion are being applied
# single quotes:
	> all expansion are disabled, word splitting is disabled
# double quotes:
	> disabled most expansion, such as 
		tilde expansion (~), 
		filename expansion (*), 
		word splitting...
	> however certain expansion are still enabled:
		Varaible and paramter expansion are still working
# the quotes only define how bash will expand / split the command
# this would be a completly valid bash command:
	$ echo 'hello'"world"
# or this:
	$ 'echo' 'hello world'
# but this wont:
	$ 'echo hello'

============================================

Common pitfall in shell expansions
# be careful:
	> the process is always the same:
		1. first, the command is being expanded
		2. then, word splitting is applied
		3. quotes are being removed
		4. command is being executed
	> this also applied to the program name that we want to execute!
# example:
	> lets say we got a folder and the filename of the forst file was echo
	> then this would be a valid command:
		- *
		$ ls
		a.txt b.txt ...
		$ touch echo
		$ ls
		a.txt b.txt echo c.txt ...
		$ echo *
		a.txt b.txt echo c.txt ...
		$ *
		a.txt: command not found
		$ rm a.txt b.txt
		$ ls
		echo c.txt ...
		$ *
		c.txt ...

# should use doucle quotes around varaibles
# otherwise, word splitting will occure
# try this is  apath that contains a space:
	$ touch $PWD/file.txt
	$ touch "${PWD}/file.txt"

Best pratice:
# try to refer to filenames in the same directory as ./file.txt
# and, for the quotes:
	> always use the quoting style that is as restrictive as possible
	> thus:
		- prefer single quotes: 'hello world'
		- if this is not possible, use double quotes:
			$ echo "hello ${USER}"
			$ echo 'hello '"${USER}"
	> use no quoting only if there's no ambiguity, 
	  or you want all expansion to be applied:
		- exmaple for no ambiguity:
			$ ls -l (would be annoying 'ls' '-la')
	> here we wanr all expansions:
		$ echo ./*.txt

============================================














