touch and mkdir commands

touch - create one or multiple files
    example: touch aron.txt laszlo.txt
    - to modify the timestamp of file
    - if the files already exists, only its timestap will be modified
    - otherwise, a new file is created
    - to chaeck timestaps use this command: ls -l

mkdir - create a new directory

============================================

mv and cp commands

mv
    - move an existing file to another location:: mv [file_name] [path/directory_name/]
    - can also be used to rename an existing file: mv [file_name] [new_file_name]
    - can als be used to rename the file and change its location: mv [file_name] [directory_name/new_file_name]

cp
    - copy a file: cp [file_name] [new_file_name]
    - we can copy and rename at the same time: cp [file_name] [directory_name/new_file_name]
    - copy file into a folder: cp [file_name] [directory_name]
    - create a backup or a copy of current folder: cp -R [directory_name] [directory_name_backup]

============================================

how to delete files?
rm (remove)
    - to remove files: rm [file_name] [other_file_name] ...
    - for deleteing directory -r flag is needed
    - also work for empty and none empty folders
    important: its dangerous! the files and folders will be removed forever!

rmdir (remove directory)
    - only delete empty directories
    - safer than rm -r command

============================================

filename expansion (globbing)
    - bash can rewrite our command before it is being executed
    - globing recognizes and epands pre-defined wildcard characters
    - it will then reserch for files thet match this pattern and expand (rewrite) or command
    - allows to eccess multiple files
    - wildcard character: *
        # matches 0 to any number o characters
        # example:  mv *.jpg imgs/  <== every file with .jpg ending move to "imgs" folder
                    mv *.* [directory_name]  <== every file move to [directory_name]
        # if there is no such files return an error:
                    mv: cannot stat '*.jpg': No such file or directory
        other example: echo *.jpg   <== shows every file name which name is end with .jpg

Filename expansion:
    IMPORTANT:
        The wildcard character must not be quoted!!!
        other interesting thing:
            touch '*.JPG'  <== created a file which name is: *.JPG
                # to move (rename) that file: mv '*.JPG' [directory_name]
        Globbing does not use regular expressions!!!!

============================================

advanced globbing wildcards
    - ?     => match any single haracter | example: echo bunn?1.*
    - [0-9] => specify character range (all numbers) | example: echo bunny[1-9].[a-z]*
    - **    => matcher zero up to arbitary many character (including /) | example: echo **/*.jpg
        # only supported Bash 4.0
        # it might be necessary to enable this: shopt -s globstar

============================================

pitfalls of globbing: avoid traps in pattern matching
# globbing can be dangerous sometimes
# bash doesn't differentiate between a folder and a paramter
# name of a file may be interpreted as a parameter
# this is especially dangerous if a file has a name such as:
    > -rf
# if we then execute rm * is that folder:
    > the * will be expanded, so -rf will appear in the command
    > rm will think that -rf is a pramater
        1. -r means recursive
        2. -f means dont ask

difference between "echo *" and "echo ./*"
echo *
important.txt letter.txt -rf
echo ./*
./important.txt ./letter.txt ./-rf
difference between "rm *" and "rm ./*"
rm * will remove all file including directories except -rf file, becuase the bash think its a command
rm ./* will remove all of the files including -rf, except directories

============================================

unzip lib:
sudo apt install unzip
sudo dnf install unzip

exercise CompanyShare
tips:
> can use custom ranges: forexample: [0-4] would match one charecter of the folowwing 0, 1, 2, 3, 4
> can combine custom ranges with wildcards for example: A[0-4]* ===> filename needs to start with A followed by 0,1,2,3,4 and followed by zero to unlimited characters
> can combine multiple patterns into a single "cp" command:
    # cp [pattern1] [pattern2] [dest]
    # cp */**/*.jpg */**/*.dng folder 
> install "tree" lib, than use "tree ." command

questions:
Take a look at the Folder- File-Structure
    How are the Folder and Files named?
    tree .
    Can we use this somehow?
    yes
We need to provide all Excel- and PDF-Files for January and February from all departments:
    How can we do this?
    echo */0[1-2]*/*.xlsx
    Can we use Globbing?
    mkdir Export && cp */0[1-2]*/*.xlsx Export
    Copy those files in a folder named Export
    cp */0[1-2]*/*.xlsx */0[1-2]*/*.pdf Export (or cp */0[1-2]*/*.{xlsx,pdf}  Export)

============================================
find program
can use the "find" program for a more sophisticated search
"find"
    > should prived a path as a first parameter: "find ." list all file and folder in the folder where used
    > limit the file type:
        # "find . -type f" only files
        # "find . -type d" only directories
    > find all files that have been modified withing the last 7 days
        # "find . -type f -mtime -7"
            @ mtime: modification timestamp
    > find all files that are larger than 10MB
        # "find . -type f -size +10M"
    > delete all empty files in a directory
        # "find . -empty -delete"
    > delete all files which size 1MB:
        # "find . -type f -size +1M -delete"
    > "find --help" short helper
    > "man find" long and more detailed documentation, how to use "find"
