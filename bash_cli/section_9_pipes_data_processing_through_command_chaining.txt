what is a pipe ("|")?
# the pipe is  amechanism that passes the output of one command as input to another command
# this, you can chain multiple commands together and build more compley functionalities
    > general syntax: command | command | ... | command
    > example:
        - ls | wc -l
        - ls | cat
        - du -h file1.txt file-not-exist.txt 2>&1 > /dev/null | wc -l

============================================

Dual output: the Utility "tee"
commonly used tool: tee
# with the combination of a pipe and the"tee" command you can create a standard output and write it to a file at the same time
# example:
    > echo "hello world" | tee hello.txt // create and add the "hello world" to the hello.txt, than write is out to the terminal
    > to append the file: echo "hello world" | tee -a hello.txt
    > other example:
        - echo "hello world" | tee -a hello.txt | wc -c // print the number of characters of the file (which we add to the file)
        - ping google.com 2>&1 | tee ping.txt // write the outputs of the ping into ping.txt

============================================

Commonly used tools: sort, uniq
# sort
    > sort the contents in a file or stdin
        - by default alphabetical order
        - sort -r: sort in reverse alphabetical order
        - sort -n: sort numbers according to numerical order
        - sort -c: check whether the contents in a file are sorted and find unsorted elements
        - sort -k <column_number> (starting at 1): sort data by a specific solumn
    > example:
        - cat users.txt | sort
        - cat users.txt | sort -r
        - cat users.txt | sort -k 2

# uniq
    > remove duplicate lines: 
        - sort users.txt | uniq
        - first have to sort the list, than use the uniq command
    > there is a sorter way:
        - sort -u users.txt
        or
        - cat users.txt | sort -u
    > find the duplicate lines in a file:
        - sort users.txt | uniq -d
        or 
        - cat users.txt | sort | uniq -d

============================================

Filter lines: grep
# grep is a tool can find a pattern in an output or a file
# basic usage
    > grep -F "pattern" file.txt
# can also wor on stdin
    > <command> | grep -F 'pattern'
# by default, grep uses "basic regular expressions"

# grep and binary data
    > grep works with every file - it will just find the pattern in the file
    > thus, we could also execute grep on files that contain binary data
    > but shouldn't:
        - may find files we are not intending to find
        - grep is mean to be used on text files, not on binary files
        - especially when using regular expression, grep can be extremely slow on binary files
        - binary files may contain non-printable characters, oe characters the change the behavior of our terminal once printed

# example:
    > ls | grep -F "file"
    > print out ip config and use grep:
        ip addr show | grep -F "inet"
        ip addr show | grep -F "inet" | grep -F "<ip_address>"

============================================

How to work with strings?
# tr (translate)
    > echo "bash" | tr "b" "d"
    > conver upper and lower case:
        - echo "bash" | tr "a-z" "A-Z"
    > try this:
        - echo "bash" | tr "a-z" "."
        - echo "bash" | tr "a-z" "0-9"
        - echo "bash" | tr "a-z" "0-9."
    > delete characters:
        - echo "bash is" | tr -d " "        
        - echo "bash is" | tr -d "s"        
# rev (reverse)
    > echo "was it a cat i saw?" | rev

============================================

selective ectraction: cut
# allows us to process and axtract data from a file or standard input
# can use it for different modes:
    > cutting by bytes:
        - cut -b
        - example: uptime | cut -b 1-10
    > cut by characters:
        -cut -c
        - example:
            uptime | cut -c 1-10
            echo "höhö" | cut -c 1-2 
                (not every character will be 1 byte, special characters cost more than 1 bytes like "ö")
            echo "höhö" | cut -c 2-
    > cutting by fields:
        - cut -d " " -f 1
        - uptime | cut -d " " -f 1
            (in case the output starts witch a whitespace character -- then you would need to use -f 2)

============================================

the tool: sed

# allows us to easily execute commands on a files or on stdin
# example:
    sed "command1; command2; ..."
# those commands can modify the string, such as:
    > delete lines
    > insert lines
    > replace lines (the most common use case for sed)
        - s/[pattern]/[replacemnet]/[flag]
            => replace a String with another
            => most common flag is "g":
                this means we want to replace all occurrences, not just the first
    > example:
        - echo "hello world" | sed "s/world/bash/g"
# there is several different implementation of sed
# OSX uses an implementation from FreeBDF from 2005
# Linux usually uses GNU sed
# so:
    > most of the code works exactly the same on each platform
    > however there might be some minor differences
        (especially ehrn running complex sed commands)


