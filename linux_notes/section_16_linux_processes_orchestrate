Important [CentOS]: Note for CentOS Users

Important note for CentOS users:

In this chapter, we will be installing several additional software to visualize 
the concept of processes.

In order to be able to use those, you need to be able to access 
additional packages (Extra Packages for Enterprise Linux) on your system. For this, you need to make sure epel-release is installed on your system:

"sudo yum install epel-release"

You can then install all the tools you need for this chapter with the following command:

"sudo yum install wget htop"

==================================

how do processes work?
# process:
	> an instance of a progam
	> independent execution unit with its own resources:
		>> CPU & MEmory resources
		>> opened files, network connections...
	> it is managed by the kernel (lowest level of the operating system)
	> each process has:
		> process ID (pid)
		> a user under which  this process runs under
		> a state (running, waiting, stopped, zombie)
		> all process are organized in a hierachy!

==================================

the "ps" command
# by default:
	> ps stands for "Process Status"
	> display information about running processes
	> useful for monitoring system resources
	> it works (almost) the same on macOS and linux
# how do we use it?
	> on linux, default usage: ps
		>> shows all processes of the current terminal (TTY)
		>> example:
			$ ps
			    PID TTY          TIME CMD
			 211213 pts/2    00:00:00 bash
			 212148 pts/2    00:00:00 ps
			$ bash
			$ ps
			    PID TTY          TIME CMD
			 211213 pts/2    00:00:00 bash
			 212386 pts/2    00:00:00 bash
			 212522 pts/2    00:00:00 ps

# how do we list processes with ps?
# we can select (and combine) from several paramters:
	> ps -A, ps -e
		>> show all processes, from all users and all sessions
	> ps -f
		>> full-format listing: show extended information, such as user, terminal,
		   and parent process (PPID) (try this: ps -ef)
	> ps -p 1234, 1235 ...
		>> show processes with process ID 1234 and 1235
		>> we are also allowed to omit (leave out) the -p, and even the comma
			$ ps 1234, 1235
				or
			$ ps -ef | grep -F 1234
				or
			$ ps -ef | less
	> ps --forest
		>> onyl linux: show the processes as an ascii tree
		   (try this: ps -ef --forest)
	> ps -l
		>> show entries in long format (a few more columns)
		   (or try this too: ps -lf / more columns/)

==================================

BSD style paramteres: ps aux
# ps also supports BSD style paramteres:
	> BSD style parameters without a dash
	> if we use a BSD style parameter, certain defaults are different
	> and (at least some of) those parameters do behave differently!
		>> ps aux / ps a u x
	> ps a
		>> show all process of all users
	> ps u
		>> display the information in a more user-oriented format
		   (additional columns)
	> ps x
		>> show processes without a tty (=processes outtside of a terminal)

==================================

multitasking: the scheduler

how does it work?
# if we only have one CPU inour system
# how can we execute multiple programs at the same time?
	> let our CPU switch between those
	> switch fast enough, it will weem like we're running all programs at the same time
	> this switching is called scheduling

can we inspect this?
# if our CPU switches from one program to another, it's called "context switch"
	> cat /proc/[process ID]/status | grep ctxt
	> cat /proc/12345/status | grep ctxt
# we can use the watch command:
	> this allows us to automatically re-execute a command
	> here: refresh the output every 0.5 second
		$ watch -n 0.5 grep ctxt /proc/12345/status

==================================

setting the priority of a process
# niceness:
	> niceness ranges from -20 to +19
	> default niceness for new processes is typically 0
	> processes with lower niceness recieve more time from the scheduler
	> typically:
		>> we need administrative privileges to lower the niceness / increase the priority of process
		>> we dont need any privileges to increase the niceness / lower the priority of a process
# set niceness
	> nice -n [niceness] [program]:
		>> sets the niceness to [niceness] for a program
		>> example:
			$ nice -n 19 gedit
	> we can also change the priority of an existing process:
		>> renice -n 19 [process ID]
		>> example:
			$ ps -ef | grep gedit
			<user-name>  133818    2381  9 12:27 ?        00:00:00 /usr/bin/gedit --gapplication-service
			<user-name>  133847  116168  0 12:27 pts/2    00:00:00 grep --color=auto gedit
			$ renice -n 10 133818
			133818 (process ID) old priority 0, new priority 10
			$ renice -n 19 133818
			133818 (process ID) old priority 10, new priority 19
			$ renice -n 10 133818
			renice: failed to set priority for 133818 (process ID): Permission denied
			sudo renice -n 10 133818
			133818 (process ID) old priority 19, new priority 10
	> install sysbench
		>> first update the system: sudo apt-get (or dnf) update
		>> sudo apt-get install sysbench -y
		>> run it like this:
			$ sysbench cpu run --threads=10
		>> make the gedit lower priotity and sysbrench upper priority:
			$ renice -n 19 gedit
			$ sudo nice -n -19 sysbench cpu run --threads=10
			>> both program run syncronously but sysbrench has higher priority
	> you can store kind of commands in a bash script, 
	  and make runabel with chmod +x <file-name>.sh

==================================

getting the process ID for a program
# let"s say we have a process of the program "firefox"
# we get it's process ID:
	$ ps -ef | grep -F 'firefox'
# but we will also get additional output
# how can we only get the process ID?
	> we can use the "pgrep" program
	> this allows us to search in out programs
	> and it only return the process ID(s)
	$ pgrep firefox
	$ pgrep -f firefox
# why is it so useful that we need a special tool?
	> reason: we can combine it with expansions
	$ renice -n 19 $(pgrep firefox)

==================================

Signals
# signals can be sent to processes, and they will interrupt tuhe process flow 
  # at a convinient time
# it's a mechanism to asynchronousrly notify a pcrocess of and event
# the operating system:
	> is responsible for delivering the signal to the process
	> maintins a signal queue, so we can send a signal to every
	  process (even to one that is not active right now)
	> what kind of messages do signal deliver?
		>> terminal: SIGINT (interrupt)
		>> shell: SIGHUP (hangup)
		>> window manager: SIGWINCH (window change)
		>> other processes: SIGTERM (terminat process)
		>> kernel:
			- SIGKILL (kill process)
			- SIGILL (illegal instruction)
lets send our first signal:
# used signal before
# when we end a command with "CTRL + C" (sigint)
# SIGINT:
	> usually sent from the terminal to a program
	> meant to indicate we would like it to stop and regain control
	  over our terminal
	> programs can listen to that signals and perform custom
	  actions - including ignoring this signal!

==================================

the kill command
# we can als send signals from other places to a process
# usually, we use the "kill" command for this
# important:
	> the program is just called kill...
	> but all it does is to send signal to programs
# how do we send a SIGINT with kill?
	> kill -s [SIGNAL] [process-ID]
	> we first need to get the process ID of the process we
	  would like to send the SIGINT to
	> and then we can send the signal to the process:
		$ kill -s SIGINT 12345
			or
		$ kill -SIGINT 12345

==================================

additional signals, SIGTERM, SIGKILL
more signals we can send to a program
# the pgroam kill can send various ignals to programs
# we can show all available signals with the commands: "kill -l"
	$ kill -l 
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX
// ubuntu signals!!!

SIGTERM
# is used to tell the process that it should terminate
# we can imagine the meaning like this:
	> hey process, would you please come to an end? If you cant
	  thats totally alright as well, just please try to come to an end
# we can send this signal the following ways:
	> kill [process ID]
		or
	> kill -s SIGTERM [process ID]
		or
	> kill -s 15 [process ID]
		or
	> kill -SIGTERM [process ID]
		or
	> kill -15 [process ID]

SIGTERM vs SIGINT
# what the different between SIGTERM and SIGINT?
	> SIGTERM tells the process to terminate
	> SIGINT tells the process to terminate, because we're in a shell and 
	  we would like to regain control immediately

SIGINT
# SIGTERM and SIGINT could be ignored from our program - it's up to the program 
  # to handle those
# how to we kill a process?
	> we send the SIGKILL signal
	> thes forcefully terminates the program
	> be careful:
		>> this may cause data loss
		>> files might not have been written completly, or might be in an
		   incosistent state
	> this signal is unique:
		>> it is not handle by the process, but y the kernel
		>> the program isn't even informed that there's a SIGKILL event
	> we can send this signal the following ways:
		>> kill -s SIGKILL [process ID]
			or
		>> kill -SIGKILL [process ID]
			or
		>> kill -s 9 [process ID]
			or
		>> kill -9 [process ID]
# you cant use it for kill the vim, for that use :qa

==================================

additional signals: SIGHUP, SIGSTOP, SIGCONT

SIGHUP
# the SIGHUP signal is used to communicate that the terminal has been closed
# the program than usually exist
# it may als mean that the program should reload its configuration
# example:
	> kill -s SIGHUP [process ID]

SIGSTOP
# the process is being put into a stopped state (=paused)
# non-catchable, the process cant ignore it
# we can later resume hte process again (with SIGCONT)
# example:
	> kill -s SIGSTOP [process ID]

SIGCOUNT
# we can send this signal to process to resume it again
# example:
	> we had stopped a process before (SIGSTOP)
	> and now we want to resume it
	> kill -s SIGCONT [process ID]

# interesting example for cobinating these two process:
	$ kill -s SIGSTOP $(pgrep wget)
	// process stop
	$ kill -s SIGCONT $(pgrep wget)
	// process continous

==================================

kill vs /usr/bin/kill vs /bin/kill
# a lot of commands exists twice:
	> one time as a shell build-in
	> and one more time as an executable file
# we can chaeck this:
	> type kill
	> example:
		$ type kill
		kill is a shell builtin
		$ type cat
		cat is /usr/bin/cat
		$ type echo
		echo is a shell builtin

# what does this mean?
	> the shell is providing this funcionality
	> when we call the "kill" command, we are not calling the
	  executable file from the operating system
# why does this matter?
	> "kill" provides additional functionsality and behaves differently than the
	  executable from the OS
# how do we find the executable from the OS?
	> we could manually investigate our "PATH"
	> or let a program do this for us:
		>> bash: which kill
		>> zsh: where kill
	> it should usually be /usr/bin/kill (linux) or /bin/kill (macOS)
	> example:
		$ kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX

		$ /usr/bin/kill -l
HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT
CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS

==================================

the "killall" command
# we can also use the "killall" command for sending signals
# the difference to kill is, that we select the process by name
# example:
	$ killall firefox
# how do we send a SIGINT with killall?
	> killall -s [SIGNAL] [process-name]

==================================

what happens when a process exist?
what are zombie processes?


what happend when a process exist?
# first, most of the resources are made available again
# parent process
	> child termination:
		>> when a child process terminates, the kernel sends a SIGCHILD
		   signal to the parent
		>> the parent can then retrieve the child's exit status
	> process reaping:
		>> the parent process uses a system call (wait or waitpid())
		   to collect the child's exit status
		>> this action is known as "reaping" the child process
		>> in a Bash, we can access the child's exit code: $?
	> orphan process:
		>> if the parent process and before the child, the child becomes an
		   orphan and is adopted by the init process (example: nohup firefox)

zombie process
# definition: a zombie process is a process that has finished executing but still
  # has an entry in the process table
# this usually occurs when the parent process hasn't read the child's exit status (yet)
# characteristics:
	> zombies can lead to process to preocess table overflow
	> they are marked as "Z" in the output of "ps -l"
# removal:
	> when the parent process ends:
		>> they're usually removed automatically
	> if not, they can be manually reaped:
		>> we can send a SIGCHILD signal to their parent
	> or we can kill the parent process:
		>> then, the init process will adopt this process and reap it

==================================

process states
# Running (R) the process is executing
# Sleeping (S) interruptible state, can be woke up, and can be runable process
# Uninterruptible sleep (D) special state, the kernel and hardware acces and send data
			    # our porgram is waiting to execute something
			    # cannot reciev any signal
			    # system call (usually I/O)

# Traced or stopped (T) reach sending a SIGSTOP and run again with the SIGCONT
# Zombie (Z) talk about it above

==================================










