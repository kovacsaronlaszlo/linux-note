Important [CentOS]: Note for CentOS Users

Important note for CentOS users:

In this chapter, we will be installing several additional software to visualize 
the concept of processes.

In order to be able to use those, you need to be able to access 
additional packages (Extra Packages for Enterprise Linux) on your system. For this, you need to make sure epel-release is installed on your system:

"sudo yum install epel-release"

You can then install all the tools you need for this chapter with the following command:

"sudo yum install wget htop"

==================================

how do processes work?
# process:
	> an instance of a progam
	> independent execution unit with its own resources:
		>> CPU & MEmory resources
		>> opened files, network connections...
	> it is managed by the kernel (lowest level of the operating system)
	> each process has:
		> process ID (pid)
		> a user under which  this process runs under
		> a state (running, waiting, stopped, zombie)
		> all process are organized in a hierachy!

==================================

the "ps" command
# by default:
	> ps stands for "Process Status"
	> display information about running processes
	> useful for monitoring system resources
	> it works (almost) the same on macOS and linux
# how do we use it?
	> on linux, default usage: ps
		>> shows all processes of the current terminal (TTY)
		>> example:
			$ ps
			    PID TTY          TIME CMD
			 211213 pts/2    00:00:00 bash
			 212148 pts/2    00:00:00 ps
			$ bash
			$ ps
			    PID TTY          TIME CMD
			 211213 pts/2    00:00:00 bash
			 212386 pts/2    00:00:00 bash
			 212522 pts/2    00:00:00 ps

# how do we list processes with ps?
# we can select (and combine) from several paramters:
	> ps -A, ps -e
		>> show all processes, from all users and all sessions
	> ps -f
		>> full-format listing: show extended information, such as user, terminal,
		   and parent process (PPID) (try this: ps -ef)
	> ps -p 1234, 1235 ...
		>> show processes with process ID 1234 and 1235
		>> we are also allowed to omit (leave out) the -p, and even the comma
			$ ps 1234, 1235
				or
			$ ps -ef | grep -F 1234
				or
			$ ps -ef | less
	> ps --forest
		>> onyl linux: show the processes as an ascii tree
		   (try this: ps -ef --forest)
	> ps -l
		>> show entries in long format (a few more columns)
		   (or try this too: ps -lf / more columns/)

==================================

BSD style paramteres: ps aux
# ps also supports BSD style paramteres:
	> BSD style parameters without a dash
	> if we use a BSD style parameter, certain defaults are different
	> and (at least some of) those parameters do behave differently!
		>> ps aux / ps a u x
	> ps a
		>> show all process of all users
	> ps u
		>> display the information in a more user-oriented format
		   (additional columns)
	> ps x
		>> show processes without a tty (=processes outtside of a terminal)

==================================

multitasking: the scheduler

how does it work?
# if we only have one CPU inour system
# how can we execute multiple programs at the same time?
	> let our CPU switch between those
	> switch fast enough, it will weem like we're running all programs at the same time
	> this switching is called scheduling

can we inspect this?
# if our CPU switches from one program to another, it's called "context switch"
	> cat /proc/[process ID]/status | grep ctxt
	> cat /proc/12345/status | grep ctxt
# we can use the watch command:
	> this allows us to automatically re-execute a command
	> here: refresh the output every 0.5 second
		$ watch -n 0.5 grep ctxt /proc/12345/status

==================================

setting the priority of a process
# niceness:
	> niceness ranges from -20 to +19
	> default niceness for new processes is typically 0
	> processes with lower niceness recieve more time from the scheduler
	> typically:
		>> we need administrative privileges to lower the niceness / increase the priority of process
		>> we dont need any privileges to increase the niceness / lower the priority of a process
# set niceness
	> nice -n [niceness] [program]:
		>> sets the niceness to [niceness] for a program
		>> example:
			$ nice -n 19 gedit
	> we can also change the priority of an existing process:
		>> renice -n 19 [process ID]
		>> example:
			$ ps -ef | grep gedit
			<user-name>  133818    2381  9 12:27 ?        00:00:00 /usr/bin/gedit --gapplication-service
			<user-name>  133847  116168  0 12:27 pts/2    00:00:00 grep --color=auto gedit
			$ renice -n 10 133818
			133818 (process ID) old priority 0, new priority 10
			$ renice -n 19 133818
			133818 (process ID) old priority 10, new priority 19
			$ renice -n 10 133818
			renice: failed to set priority for 133818 (process ID): Permission denied
			sudo renice -n 10 133818
			133818 (process ID) old priority 19, new priority 10
	> install sysbench
		>> first update the system: sudo apt-get (or dnf) update
		>> sudo apt-get install sysbench -y
		>> run it like this:
			$ sysbench cpu run --threads=10
		>> make the gedit lower priotity and sysbrench upper priority:
			$ renice -n 19 gedit
			$ sudo nice -n -19 sysbench cpu run --threads=10
			>> both program run syncronously but sysbrench has higher priority
	> you can store kind of commands in a bash script, 
	  and make runabel with chmod +x <file-name>.sh

==================================









