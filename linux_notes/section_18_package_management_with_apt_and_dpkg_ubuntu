what is package management?

# definition: process of installing, updating, configuring, and removing software
# purpose: streamline software handling on a linux system
# why do we need it?
	> facilities easy software distribution
	> simplifies software
	> ensures software compatiblity
	> handles dependencies
	> maintians system stability and security
# need to be careful:
	> package management is quite different between different linux distributions
# uses apt / apt-get and dpkg
# or package management with snap

================================================

dpkg: debian package manager
# On the lowest level, "dpkg" is responsible for installing software packages

# Those packages are distributed as .deb files, and we can install
# them through dpkg:
	> dpkg -i pacakge.deb

# A .deb file is a compressed archive (ar file format) with all the
# files needed for the program, and its installation on the system

# How do we get those software packages?
	> automatically
	> manually
# check the system:
	$ lsb_release -a
	No LSB modules are available.
	Distributor ID:	Ubuntu
	Description:	Ubuntu 24.04.2 LTS
	Release:	24.04
	Codename:	noble

# example:
	> download a package (for example: neofetch) from https://packages.ubuntu.com/
	$ cd ~/Downloads
	$ sudo dpkg -i neofetch_<version>.deb
	
# to unistall it:
	$ sudo dpkg -r neofetch

================================================

dependency management with apt

# dpkg was able to install -deb pacakges on our system
# But we were able to install dependencies throught it
# Thus, we need another tool, that builds on top of dpkg. We can
# choose on of the following:
	> apt-get:
		>> stable api, we should us this when we're writing scripts
	> apt:
		>> api and paramteres might change when deemed necessary

A package source / repository in apt
# apt-get / apt needs to know which packages are available, and
# where it can download them from

# We thus need to connect to central repositories, which provide 
# our packages

# Those central repositories are stored in the following files:
	> repositories from the system:
		>> /etc/apt/sources.list
	> additional (third party) repositories:
		>> /etc/apt/sources.list.d/*
# important:
	> those repositories provide a list with packages, their versions, ...
	> we must fully trust those repositories
	> they could even replace software on our system

# example:
	> check the /etc/apt/sources.list
	$ nano /etc/apt/sources.list
	> check the /etc/apt/sources.list.d/
	$ ls /etc/apt/sources.list.d/
		(if it's empty, no problem)


Updating package definitions

# Once we have our repositories, we need to update the "package definitions"
# This means, that we fetch the latest list of available pacakges 
# from the repositories

# We can do this with the following command:
	$ sudo apt update
		or
	$ sudo apt-get update

# After this, we're able to install software on our system
	> if we want to install neofetch, we could now do it:
		$ sudo apt isntall neofetch
		>> this pacakge is then installed - and all dependencies 
		   (additional pacakges) needed to execute "neofetch"
		>> "apt" will remember, which package we installed manually, 
		   and which packages were just installed as dependencies 
# example:
	$ sudo apt install neofetch
	...
	> during the installation the program will install other packages
	> if we dont want to install those:
	$ sudo apt install --no-install-recommends neofetch

# to remove pacakge:
	$ sudo apt remove [package-name]

================================================

Keeping our system up to date

Manging upgrades
# We want to keep our system up to date
# We thus want to install available updates on out system
# How do we do this?
	$ sudo apt upgrade
		or
	$ sudo apt-get upgrade --with-new-pkgs
# What will this do?
	> This will install all available and possible updates - and even
	  install additionla dependencies (if they become necessary)
	> It will never remove any packages from our system, even if
	  they're no longer needed

Managing updates (full-upgrades / dist-upgrade)
# If we want to have a bigger upgrade, we need to allow apt to
# unistall pacakges as well
	> sudo apt full-upgrade
		or
	> sudo apt-get dist-upgrade
# This will:
	> try to install all available and possible upgrades
	> uninstall dependencies of this required in prder to install
	  the upgrade
	> example fro this:
		>> package A depdends on Package B (v1.0)
		>> package a is updated, now depending on Package C (v1.0)
		   which conflicts with Pacakges b (v1.0)
		>> pakcage B in uninstalled during dist-upgrade

# warning: dist-upgrade
	> be careful with the dist-upgrade / full-upgrade
	> it can remove programs you were relying on, 
	  in order to solve dependency problems
	> thus, be sure to:
		>> really read the output of what it wants to do
		>> have a backup
		>> have enough time to fix potential problems

================================================

auto-removing packages: autoremove
# full-upgrade/ dist-upgrade only uninstall dependencies, if
# they're exclusive and need to be uninstalled

# All other dependencies will remain installed, even if they're 
# no longer needed

# To insitall those, we need to execute the following command:
	$ sudo apt autoremove
		or
	$ sudo apt-get autoremove

================================================

Format of the repository file

How does the sources.list work?

# The system reads the following file(s) for its repositories:
	> /etc/apt/sources.list
	> /etc/apt/sources.list.d/*

# Whats the systax of the /etc/apt/sources.list?
	> deb https://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
	> <type> <uri> <distribution> <domain1> <domain2> ...
	> <type>:
		>> deb: This repository contains binary packages
		>> deb-src: This repository contains source packages
	> <uri>: The address of the repository
	> <distributions>: The ubuntu version, we want to download the packages for
	
	<domain>			Free software		Non-Free software
	
	Officially supported by
	Canonical			main			restricted
	
	Communtity
	supported/Third party		universe		multiverse

================================================

Custom repositories
# We can add additional repositories to our apt source
# If we were to do manual:
	> We create a new file in /etc/apt/source.list.d
	> usually: we need to add the GPG key to our system for this repository
	> this is needed so that our system trusts the third-party repository
	> usually wherever you find an installation guide for thhis, they will
	  explain all the steps required
	> Important:
		>> the third-party repository could install any software on our system
		>> it could for example say: I got bash in version 100000 - 
		   and our system sould trust this and update it
		>> even if bash was installed from the offial repository before
# example (198th video has an example to install wine program)

================================================

PPA on Ubuntu

Third party packages: ppa
# personal pacakge achive:
	> this will usually work only on ubuntu, not on Debian systems
	> its a website where users can easily provide repositories for others:
	  https://lauchpad.net/ubuntu/+ppa
	> for example, for the lates php version, we could just add a ppa:
		$ sudo add-apt-repository ppa:ondrej/php
		$ sudo apt update
	> we would then have access to the lates php packages
	> to remove a ppa:
		$ sudo add-apt-repository --remove ppa:ondrej/php
	> BUT:
		>> we're installing a third party repository here
		>> they could install any software on our system when we start a system
		   update / upgrade

================================================
  
Verifying installation: debsums
# A lot of packages ship with a list of md5 checksum of the files
# they're installing on our system

# We can use those checksum to verify if the files that have been
# installed are still identical

# Important:
	> md5 is considered insecure
	> A malicious actor might be able to generate an executable, that
	  doeas something different, but still yields the same checksum
	> Still, it's enough for 99%+ exact overview

# We can verify all pacakges that contain an md5 sum with the
# command debsum:
	> debsums [package / .deb file]
	> we might have to install it first:
		$ sudo apt install debsums
# important paramters:
	> -a : list all files (inclusing configuration files)
	> -l : list packages, that dont have to list of files with their md5 sum
	> -s: Silent, only list errors
# example:
	$ sudo debsums -a -s
	debsums: missing file /DEBIAN/prerm (from docker-desktop package)
	...
	debsums: changed file /usr/sbin/start-stop-daemon (from dpkg package)
	debsums: changed file /etc/systemd/resolved.conf (from systemd-resolved package)
	> maybe it list other files, those files above just examples from my system
	
	$ sudo debsums -l
	$
	
	$ sudo touch /bin/test123
	$ sudo chmod +x /bin/test123
	$ test123
	$ test1234
	test1234: command not found
	$ sudo debsums -a -s
	debsums: missing file /DEBIAN/prerm (from docker-desktop package)
        ...
        debsums: changed file /usr/sbin/start-stop-daemon (from dpkg package)
        debsums: changed file /etc/systemd/resolved.conf (from systemd-resolved package)
	> not find because its not a package
	
# good thie debsums if you want to use a server (not yours)
# and want to check if everything is okay with that server
# no changes or other not safe program changes

================================================

dependency management
# we got 2 tools, with at least on dependency:
	> bash: wants libc5 >= 2.35
	> zsh: want libc6 >= 2.36
# in this case, the solution is easy:
	> we can install libc6 in version 2.36
	> and if we're currently on version 2.35, when we install zsh, 
	  we just upgrade libc6 version 2.36
	> so unsually, "apt" should resolve dependency issues automatically

show dependencies
# We can show the dependencies of packages with the
# following commands:
	$ sudo apt show bash
		or
	$ sudo apt-cache show bash

================================================

Conflict resolution:
# dependency conflict:
	> we got 2 tools, with different dependencies:
		>> bash: wants libc6 <= 2.35
		>> zsh: wants libc6 >= 2.36
	> we now would want to isntall both tools on our system
	> which version of libc6 should we install?
	> we now have a problem:
		>> we cant satisy either dependency requirement
		>> apt is not able to resolve this dependency conflict
	> we must manually resolve this!
# how do we solve a dependency conflict?
	> we ask apt to autoamtically fix the dependency issue for us:
		$ sudo apt install -f
			or
		$ sudo apt-get install -f
		
		>> -f stands for "--fix-broken"
		>> "apt" will analyze the current package state, identify
		   inconsistencies, and solve them by installing, upgrading or
		   removing packages
		>> in 75%+ of cases, this should resolve the problem 
		   (for packages from the default repositories)
# example:
	> find an old package of "zsh"
	$ sudo dpkg -i --force-all <zsh_5.0.5-...>.deb
	> we will get some warnings and maybe some errors too
	> in case of error(s) the install wont be done


# How do we solve a dependency conflict? (part 2)
	> we run an update / upgrade of our system:
		$ sudo apt full-update
			or
		$ sudo apt-get dist-update

		>> this works especially well before we try to install additional
		   software

	> it this doesnt work:
		$ sudo apt autoremove
			or
		$ suro apt-get autoremove
		
		>> lets automatically uninstall all packages that are no longer 
		   needed
		>> this sometimes solve the problem

# Best pratice:
	> avoid third-party repositories (if possible)
	> avoid installin software with .deb file (if possible)
	> regularly install all normal software updates (always)
	> before upgrading to a new ubuntu version:
		>> plan some extra time for dependency issues
		>> wait a month or twi after release of new Ubuntu version
		   (especially when using third-party repositories)
		>> create a complete backup for your system
	> use LTS (=long term support) version of ubuntu for servers - 
	  less upgrades, less problems
	> consider using tools like docker to containerize your application

================================================

Trigger reconfigure with dpkg

Reconfiguring packages
# Sometimes packages asks us questions when we install them
# Or they run configuration when we install them on our system
# Example:
	> a Bootloader (for example grub) might want to install itself as
	  the main bootloader
	> a webserver might set itself up in a way that a user and group is
	  created and that it automatically starts with our system
	> a display manager (manages the login screen) might start a
	  dialog to ask us which on should be the default display
	  manger
	> sometimes we want to re-run those scripts
	> we can do if with the following command:
		>> sudo dpkg-reconfigure <package>

# Other example:
	> we install the package "locales" the first time
	> this packages asks us which locales we want to generate
	> what is a locale?
		>> it defines how numbers and dates should be displayed
		>> a lot of programming languages rely on the operating system to
		   provide this functionality
		>> for example, if we want to have a website (in php),
		   and we want to use the build-in functions to format dates
		>> the corresponding locale must be generated
			$ date +%d
			04
			$ date +%d/%m
			04/03
			$ date +%m/%d
			03/04
			$ date +%m/%d/%y
			03/04/25
			$ date +%A
			Tuesday
			$ sudo dpkg-reconfigure locales
			- choose which locales you want to use!
			...
			Generation complete.
			$ LC_ALL=de_DE.UTF-8 date +%A
			Dienstag

================================================

Snap pacakges

Package management with "snap"
# We have now seen how delicate "apt" work

# One dependency can be extremely problematic and cause apt to fail or
# to be unable to resolve it

# All the dependencies must be installed globally

# Snap solve this:
	> we bundle an application with all its dependencies
	> the download might be larger, because the dependencies are included
	> but this allows each application can have different dependencies
	> and this package can be independent from the linux distribution
	> packages should be updated automatically in the background (snapd)
	  otherwise we can trigger it:
		$ snap refresh

How do snap packages work?
# Snap is a centralized repository for complete applications:
	> people can publish their applications to that repository
	> if we install a snap application, we shluld make sure taht we 
	  trust the authors!
	> we can have a look at the available packages here:
		https://snapcraft.io/

# install gimp app:
	$ sudo snap install gimp
	...
	$ cd /var/lib/snapd
	apparmor     cgroup   device       hostfs   seccomp   snapshots   system-key
	assertions   cookie   environment  inhibit  seed      ssl         void
	auto-import  dbus-1   features     lib      sequence  state.json
	cache        desktop  firstboot    mount    snaps     state.lock
	$ cd snaps
	$ ls
	bare_5.snap        firmware-updater_147.snap    partial
	core_17200.snap    firmware-updater_167.snap    snapd_21759.snap
	core18_2846.snap   gimp_484.snap                snapd_23545.snap
	core18_2855.snap   gnome-3-28-1804_198.snap     snapd-desktop-integration_178.snap
	core20_2496.snap   gnome-3-38-2004_143.snap     snapd-desktop-integration_253.snap
	core22_1722.snap   gnome-42-2204_176.snap       snap-store_1173.snap
	core22_1748.snap   gnome-42-2204_202.snap       snap-store_1248.snap
	firefox_5751.snap  gtk2-common-themes_13.snap
	firefox_5783.snap  gtk-common-themes_1535.snap
	$ cd /snap/
	bare    core20            gimp             gtk2-common-themes  snapd-desktop-integration
	bin     core22            gnome-3-28-1804  gtk-common-themes   snap-store
	core    firefox           gnome-3-38-2004  README
	core18  firmware-updater  gnome-42-2204    snapd
	$ cd gimp
	$ ls
	484  current
	$ cd current
	$ ls
	bin  data-dir  etc  lib  meta  sbin  snap  usr  var
	$ cd /snap/bin
	$ ls
	firefox              firmware-updater  gimp        snap-store.show-updates
	firefox.geckodriver  geckodriver       snap-store
	$ gimp
	Cannot open display:
	$ which gimp
	/snap/bin/gimp
	$
