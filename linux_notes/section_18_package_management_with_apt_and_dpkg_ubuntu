what is package management?

# definition: process of installing, updating, configuring, and removing software
# purpose: streamline software handling on a linux system
# why do we need it?
	> facilities easy software distribution
	> simplifies software
	> ensures software compatiblity
	> handles dependencies
	> maintians system stability and security
# need to be careful:
	> package management is quite different between different linux distributions
# uses apt / apt-get and dpkg
# or package management with snap

================================================

dpkg: debian package manager
# On the lowest level, "dpkg" is responsible for installing software packages

# Those packages are distributed as .deb files, and we can install
# them through dpkg:
	> dpkg -i pacakge.deb

# A .deb file is a compressed archive (ar file format) with all the
# files needed for the program, and its installation on the system

# How do we get those software packages?
	> automatically
	> manually
# check the system:
	$ lsb_release -a
	No LSB modules are available.
	Distributor ID:	Ubuntu
	Description:	Ubuntu 24.04.2 LTS
	Release:	24.04
	Codename:	noble

# example:
	> download a package (for example: neofetch) from https://packages.ubuntu.com/
	$ cd ~/Downloads
	$ sudo dpkg -i neofetch_<version>.deb
	
# to unistall it:
	$ sudo dpkg -r neofetch

================================================

dependency management with apt

# dpkg was able to install -deb pacakges on our system
# But we were able to install dependencies throught it
# Thus, we need another tool, that builds on top of dpkg. We can
# choose on of the following:
	> apt-get:
		>> stable api, we should us this when we're writing scripts
	> apt:
		>> api and paramteres might change when deemed necessary

A package source / repository in apt
# apt-get / apt needs to know which packages are available, and
# where it can download them from

# We thus need to connect to central repositories, which provide 
# our packages

# Those central repositories are stored in the following files:
	> repositories from the system:
		>> /etc/apt/sources.list
	> additional (third party) repositories:
		>> /etc/apt/sources.list.d/*
# important:
	> those repositories provide a list with packages, their versions, ...
	> we must fully trust those repositories
	> they could even replace software on our system

# example:
	> check the /etc/apt/sources.list
	$ nano /etc/apt/sources.list
	> check the /etc/apt/sources.list.d/
	$ ls /etc/apt/sources.list.d/
		(if it's empty, no problem)


Updating package definitions

# Once we have our repositories, we need to update the "package definitions"
# This means, that we fetch the latest list of available pacakges 
# from the repositories

# We can do this with the following command:
	$ sudo apt update
		or
	$ sudo apt-get update

# After this, we're able to install software on our system
	> if we want to install neofetch, we could now do it:
		$ sudo apt isntall neofetch
		>> this pacakge is then installed - and all dependencies 
		   (additional pacakges) needed to execute "neofetch"
		>> "apt" will remember, which package we installed manually, 
		   and which packages were just installed as dependencies 
# example:
	$ sudo apt install neofetch
	...
	> during the installation the program will install other packages
	> if we dont want to install those:
	$ sudo apt install --no-install-recommends neofetch

# to remove pacakge:
	$ sudo apt remove [package-name]

================================================

Keeping our system up to date

Manging upgrades
# We want to keep our system up to date
# We thus want to install available updates on out system
# How do we do this?
	$ sudo apt upgrade
		or
	$ sudo apt-get upgrade --with-new-pkgs
# What will this do?
	> This will install all available and possible updates - and even
	  install additionla dependencies (if they become necessary)
	> It will never remove any packages from our system, even if
	  they're no longer needed

Managing updates (full-upgrades / dist-upgrade)
# If we want to have a bigger upgrade, we need to allow apt to
# unistall pacakges as well
	> sudo apt full-upgrade
		or
	> sudo apt-get dist-upgrade
# This will:
	> try to install all available and possible upgrades
	> uninstall dependencies of this required in prder to install
	  the upgrade
	> example fro this:
		>> package A depdends on Package B (v1.0)
		>> package a is updated, now depending on Package C (v1.0)
		   which conflicts with Pacakges b (v1.0)
		>> pakcage B in uninstalled during dist-upgrade

# warning: dist-upgrade
	> be careful with the dist-upgrade / full-upgrade
	> it can remove programs you were relying on, 
	  in order to solve dependency problems
	> thus, be sure to:
		>> really read the output of what it wants to do
		>> have a backup
		>> have enough time to fix potential problems

================================================

auto-removing packages: autoremove
# full-upgrade/ dist-upgrade only uninstall dependencies, if
# they're exclusive and need to be uninstalled

# All other dependencies will remain installed, even if they're 
# no longer needed

# To insitall those, we need to execute the following command:
	$ sudo apt autoremove
		or
	$ sudo apt-get autoremove

================================================

Format of the repository file

How does the sources.list work?

# The system reads the following file(s) for its repositories:
	> /etc/apt/sources.list
	> /etc/apt/sources.list.d/*

# Whats the systax of the /etc/apt/sources.list?
	> deb http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
	> <type> <uri> <distribution> <domain1> <domain2> ...
	> <type>:
		>> deb: This repository contains binary packages
		>> deb-src: This repository contains source packages
	> <uri>: The address of the repository
	> <distributions>: The ubuntu version, we want to download the packages for
	
	<domain>			Free software		Non-Free software
	
	Officially supported by
	Canonical			main			restricted
	
	Communtity
	supported/Third party		universe		multiverse

================================================

Custom repositories
# We can add additional repositories to our apt source
# If we were to do manual:
	> We create a new file in /etc/apt/source.list.d
	> usually: we need to add the GPG key to our system for this repository
	> this is needed so that our system trusts the third-party repository
	> usually wherever you find an installation guide for thhis, they will
	  explain all the steps required
	> Important:
		>> the third-party repository could install any software on our system
		>> it could for example say: I got bash in version 100000 - 
		   and our system sould trust this and update it
		>> even if bash was installed from the offial repository before
# example (198th video has an example to install wine program)

================================================

PPA on Ubuntu

Third party packages: ppa
# personal pacakge achive:
	> this will usually work only on ubuntu, not on Debian systems
	> its a website where users can easily provide repositories for others:
	  http://lauchpad.net/ubuntu/+ppa
	> for example, for the lates php version, we could just add a ppa:
		$ sudo add-apt-repository ppa:ondrej/php
		$ sudo apt update
	> we would then have access to the lates php packages
	> to remove a ppa:
		$ sudo add-apt-repository --remove ppa:ondrej/php
	> BUT:
		>> we're installing a third party repository here
		>> they could install any software on our system when we start a system
		   update / upgrade

================================================
  






