background jobs in bash

what is job?
# a job is a command that is being executed
# a job can consist out of multiple programs:
	> cat file.txt | wc
	> in this casw, wehave 2 programs that are being executed at the same time:
	  cat and wc
	> both of those programs are bundled into one job that is being executed
# so far:
	> foreground jobs:
		>> we have looked at foreground jobs
		>> those occupy our shell: bash will wait for its completion before
		   accepting a new command

background jobs in bash
# we can also start background jobs in bash:
	> [command] &
	> example:
		$ ping -c 10 google.com &
		> the -c option limits the number of ping packets to 10
	> because of the "&" symbol, the command will be started as a background job
	> the output will still be displayed in the shell
	  (unless we redirect it)
	> it will display the job ID and the process ID

==========================================

list running jobs: jobs
# list running jobs in the background
# ping is running in the background
# command:
	$ jobs
# output:
	$ [1]+	Running		ping -c 10 google.com &

job to foreground: fg
# if we want to get a job back into foreground, use "fg" command
	> fg [%job-ID]
	> for example:
		$ fg %1
	> if there's just one job, it will automatically switch to
	  that, and we dont need to specify the job ID:
		$ fg
		> if there're multiple jobs, it will switch to the current
		  job (marked with a + in the jobs table
# important:
	> only foreground jobs can recieve keyboard input
	> this alaso includes signals, such as SIGINT
		>> ctrl+c
		>> this will onyl ask foreground jobs / processes to quit themselves
	> but it will not work for background jobs!

==========================================

job managemend: suspend program, resume it

send a job to the background
# if we are a foreground job, and would like to send it into the background...
# we can suspend the job:
	> we enter the suspend character (usually: ctrl + z)
	> this internally send s SIGSTP signal to the programs involved
	> SIGSTP?
		>> nicerversion of the SIGSTOP signal: it asks the program to pause
		   execution and return control to the terminal
		>> a program could ignore it though
	> the job can be resumed

how can we resume the job?
# we can resume a job in the foreground:
	> fg %[job-ID]
# we can also resume a job as a background job:
	> fg %[job-ID] &
		or
	> bg %[job-ID]
# when continuing:
	> a SIGCONT signal is sent to the program

==========================================

how can we kill a job?
# we can kill a job with the "kill" command
	> kill %[job-ID]
	> this will wend SIGTERM to the job and will ask the job to terminate itself
	> if this doesn't work, we could of course also send SIGKILL to a job:
		$ kill -s SIGKILL %[job-ID]

==========================================



