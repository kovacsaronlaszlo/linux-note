Å±files on Unix
# in this chapter:
	> will have a look at the folder structure on Linux systems
	> will have a look at what a file is:
		- this sounds simple, but there're spacial kind of files
		- as an example:
			-- symlinks (symbolic links)
			-- files taht reresent devices
# important:
	> understanding of how the files are organized
	> to understand symbolic links and their implications
	> will also investigate potentioal problems:
		- our drive might be "full" even though enough disk space is available
		  (inode limit)

===================================

What files in Unix systems
# what is a file?
	> a cointaner for storing, accessind and/or managing data
	> typically associated with a unique identifier or filename
	> this name, combined with its path, provides a unique location for 
	  each file in a system.
# files can have various attributes (stored in inode):
	> size: the amount of data stored in the file
	> permission: who can read, write, or execute the file
	> ownership: which user and group owns the file
	> timestamps: when the file was created, last accessed, or modified

How is the data stored?
+-------------+		+------------------------+	 +--------------+
|  file.txt   |========>| Inode: Stores Metadata |	 |		|
+-------------+		|			 |	 | Data on Disk |
			| File type		 |======>|   (usually)  |
			| Acces rights		 |	 |		|
			| Number of hardlinks	 |	 +--------------+
			| File size		 |
			| Last modified data	 |
			| Last acces date	 |
			| Where is the data	 |
			|  physically stored?	 |
			| ...			 |
			+------------------------+

How does a folder work?
+-----------+	+------------------------+	+-----------+
|  folder   |==>| Inode: Stores Metadata |	| file.txt  |
+-----------+	|			 |	|	    |
		| Access rights		 |=====>|	    |
		| Permission		 |	|	    |
		| Where is the data	 |	+-----------+
		|  physically stored?	 |
		| ...			 |
		+------------------------+
files allow us to struture the data

# files on Unix systems:
	> in linux and unix-like systems, (alomst) everything is considered a file
	> this is part of the unix philosophy
	> example:
		- ordinary file (-)
		- directories (d)
		- symbolic links (l)
		- character device (c)
		- block device (b)
		- named pipes (p)
		- sockets (s)
	> we can show the type of a file with the ls command:
		- ls -l [folder / file]
		- the type then shows up as the first character of the file columns:
			$ -rw-rw-r-- 1 [user] [user] 9019 Apr 29 11:46 document.odt

===================================

what is a symlink?
# a symlink (symbolic link) is a special kind of file on Unix systems
# purpose:
	> it serves as a reference to another file or directory
	> its a spacial way of shortcut" to another destination
# the idea:
	> we create a special file, that contains a reference to the destination path
	> this reference is being resolved on access of the symlink 
	  (or a file within it)
# how to create a symlink?
	> we can use the "ln -s" command for this
	> "ln" is a tool to make links between files
	> we can use it to create symlinks
	> example:
		-- ls -l target link
		$ ls
		$ ln -s Desktop/ abc
		$ ls
		... abc ...
		$ cd abs
		// list files/folders which are on Desktop
# how do we see if a file is a symlink
	> we can use the "ls" command:
		$ ls -l
		- if the first character is an "l", this is a symlink:
			lrwxwrwxrwx
	> other exaple:
		$ ln -s download.zip down.zip
		or
		$ ln -s /media/<user>/<sdcard>/document sd
		  (
		   made a symlink using an sd card, if you remove the sd card
		   the link will be broken
		  )

===================================

what is a hard link?
+-------------+         +------------------------+       +--------------+
|  file.txt   |========>| Inode: Stores Metadata |       |              |
+-------------+         |                        |       | Data on Disk |
| hardlink.txt|========>| File type              |======>|   (usually)  |
+-------------+         | Acces rights           |       |              |
                        | Number of hardlinks    |       +--------------+
                        | File size              |
                        | Last modified data     |
                        | Last acces date        |
                        | Where is the data      |
                        |  physically stored?    |
                        | ...                    |
                        +------------------------+
# a hardlink is adirectory entry or reference to an existing inode
# technically, the first finelname of a file is already a hardlink
# but one file can have multiple hardlinks
# thus:
	> hardlinks behave as if they were the same file
	> a hardlink can only link to files on the same filesystem
	> the filesystem must support additional hardlinks
# if delete a hardlink:
	> the other filenames /hardlinks remain intact
	> the data is only deleted if all hardlinks are removed
# how can we create a hardlink?
	> use the "ln" command (without th "-s")
	> ln target hardlink
# important hardlink cannot be created for directories (to prevent loops)
# create a hardlink:
	$ touch file.txt
	$ nano file.txt
	// add content
	$ ls
	... file.txt ...
	$ ln file.txt Desktop/message.txt
	$ nano Desktop/message.txt
	// append something and save
	$ cat file.txt
	// file.txt contant is the same as message.txt

# good for complex folder structures
	> example:
	$ mkdir Desktop/02/04; mv Dekstop/message.txt Desktop/02/04
	$ mkdir bookkeeping; mv file.txt bookkeeping

# copy files woth hard link
	> copy whole folder structure with hard links:
		-- cp -al source dest
		-- this will copy th whole source folder, and create hard links for al files!!!
		-- we will not need any additional storage for this
		-- we can now organize the files in multiple different folder
		   structures, without needing any additional disk space

	> example
		$ cp -al Desktop/ restructured
		$ cd ~
		$ ls 
		... restructured ...

===================================

Increasing the inode limit
# during the createion of a filesystem, space is reserved for inodes
# this space cant be used for anything else
# we can show how many inodes are being used:
	$ df -ih
# usually, the limit should sufficiently high, so we'll never reach it
# but if your application uses many small files:
	> this can be (theoretically) reached
	> processes or applications creach or cant be started
	> operating system crashes
	> to solve this:
		- remove files that are no longer needed
		- compress multiple files into an archive (form example: .tar)
		- recreate your filesystem with a higher inode limit
		- store data on additional drives (and mount them)

===================================

buffered vs unbuffered I/O

unbuffered:
# directly handles data between tha I/O device and the program
# real-time data:
	> offers more precise control over data flow and timing
# example:
	> reading data from keyboard
	> reading data from sensors

buffered:
# utilizes a temporary storage area (buffer) to hold data befora its being recieved / sent
  # to the I/O device
# advantages:
	> efficiency: reduces teh number of I/O operations by accumulating data 
		      before processing
	> performance: enhances speed, espacially for disk and network operations
	> data integrity: simplifies the implementation of data intagrity checks
	> ideal for large, sequential data transfer
# typical examples:
	> reading files from the disk
	> witing data to disk in blocks

===================================

"everything is a stream of bytes" (linus torvalds)
# (almost) all hardware devise are represented as a "file"
# (or to be more precise: as a stream of bytes)
# throught this "file", we can enable access to the underlying hardware without
# knowing it a technical details

what is a device?
# a device refers to a physical or virtual entity that can be accessed through a filelike interface
# device in Unix serve as the interface between the operating system and various hardware or virtual component
# the allow applications and users to interact eith these components by reading from and writing to their corresponding device files

what kind of device does Unix support?
# character device (c)
	> gain unbufferes, dierct access to the hardware
	> usually, access those device by reading a byte (charater)
	> though there might be additional restrictions / requirements for certain character devices
# block device (b)
	> gain buffered access to the hardware
	> multiple bytes are bundled into a block
	> access this device through accessing those blocks
# pseudo device
	> those are devices that dont necessarily refer to a physical device
	> depending on the type, they may show up as a block device or a character device

===================================
important pseudo devices
# /dev/null
	> when reading: return EOF (end of file)
	> when writing: discard the information
# /dev/random
	> produce a stream of random numbers
	> onyl produces random data, as long as enough
	  "envorinment noise" is avialable
# /dev/urandom
	> just as /dev/randum BUT!
	> always produces data, and may reuse already used "environmental noise"
# /dev/stdin, /dev/stdout, /dev/stderr
	> facialitates input /output / errors for normal Unix programs

===================================

important /proc files (procfs)
# if we want to inspect our system, we can look into files in the /proc folder
	> /proc/cpuinfo
		- contains information about the system's CPU(s), like vendor, model 
		  and speed
	> /proc/meminfo
		- displays the current memory usage of the system, including physical
		  and swap memory
	> /proc/version
		- contains version information about the kernel, gcc, and the operating 
		  system
	> /proc/uptime
		- displays the time the system has been up (in seconds) and the
		  amount of time it has been idle
	> /proc/loadavg
		- shows the system load avarages for the past 1,5 and 15 minutes,
		  number of currently running process / and number of threads, and
		  the last PID

===================================

filesystem hierarchy standard
# definition:
	> the filesystem hierarchy standard (fhs) defines the directory
	  structure directory contents in Unix-like operating systems
	> it provides a consistent and predictable location for specific
	  types of files and directories
# purpose:
	> ensure compatibility across different distributions
	> makes it easier for users, administrations, and developers to locate files

what are the important folders? (part 1)
	> /
		- the root directory of the hierarchy
	> /bin
		- contains essetial command binaries required for users
		- nowadays: being merged into /urs/bin (usrmerge)
	> /boot
		- contains file for the bootloader
	> /dev
		- contains device files that represent hardware and software devices
		- example: /dev/null, /dev/sda (first SATA drive), /dev/tty
		  (terminal device file)
	> /etc
		- contains system-wide configuration files and directories
		- these files are generally text files that can be edited for system 
		  configuration

===================================

filesystem hierarchy standard (part 2)
	> /home
		- contains personal directories for users
		- user-specific settings, documents, and other files are stored here
	> /lib
		- contains library files that supports the binaries located under /bin and
		  /sbin
		- depending on the system, we might also have additional lib folders for
		  additional architectures
		  example: /lib32, /lib64
		- nowadays: being merges into /usr/lib (usrmerge)
	> /media
		- contains mount points for removable storage media
	> /mnt
		- mount points for additional filesystem
	> /opt
		- optinal application software packages can be stored here

===================================

what are the important folders? (part 3)
	> /proc
		- virtual filesystem (usually procfs)
		- provides information about processes and the kernel
	> /root
		- contains the personal data for the root user 
		  (home folder of the root user)
	> /run 
		- run-time data
		- files here will be removed / emptied during boot, or will be discared 
		  on shutdown
	> / sbin
		- contains essential system binaries that are generally used by the 
		  root user
		- nowadays: being merged into /usr/sbin (usrmerge)
	> /srv
		- files for service (if we dont store them in /var)
		- quite ofeten, date offered by FTP servers
	> /sys
		- information about device, drivers and kernel features

===================================

filesystem hierarchy standard (part 4)
	> /tmp
		- contain temporary files created by system and users
		- these files are typically deleted on reboot
	> /usr
		- contains shareable, read-only data
		- this includes system binaries, libaries, documentation, and source-code
		  for various system programs
		- usually, files in the folders could be shared between multiple computers
		- BUT
		  -- /use/local
		     this folder is for files that should not be shared between 
		     multiple computers
	> /var
		- conatians variable data files such as log, database, websites and email,
		  among other rings
		- this directory's contants changes as the system runs

===================================

what is the usrmerge project?
# we can answer the following questions:
why is /bin indetical to /usr/bin?
why is /sbin indetical to /usr/sbin?
why is /lib indetical to /usr/lib?

# usrmerge project:
	> a project to simplify the filesystem hierarchy on linux systems
	> it merges several directory that traditionally exist on the root
	  level (/) into their counterparts in /usr
	> back then:
		- it was important to differentiate between /lib and /usr/lib
		- reasoning: bach then, we might have wanted to store /usr on
		  a different, physical drive
		- /bin, /sbin, /lib would only contain applications that are
		  absolutely necessary to fix  a broken system


	> nowadays, this no longer necessary:
		- thus, we can now simplify our directory structure
