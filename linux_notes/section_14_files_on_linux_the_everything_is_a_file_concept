files on Unix
# in this chapter:
	> will have a look at the folder structure on Linux systems
	> will have a look at what a file is:
		- this sounds simple, but there're spacial kind of files
		- as an example:
			-- symlinks (symbolic links)
			-- files taht reresent devices
# important:
	> understanding of how the files are organized
	> to understand symbolic links and their implications
	> will also investigate potentioal problems:
		- our drive might be "full" even though enough disk space is available
		  (inode limit)

===================================

What files in Unix systems
# what is a file?
	> a cointaner for storing, accessind and/or managing data
	> typically associated with a unique identifier or filename
	> this name, combined with its path, provides a unique location for 
	  each file in a system.
# files can have various attributes (stored in inode):
	> size: the amount of data stored in the file
	> permission: who can read, write, or execute the file
	> ownership: which user and group owns the file
	> timestamps: when the file was created, last accessed, or modified

How is the data stored?
+-------------+		+------------------------+	 +--------------+
|  file.txt   |========>| Inode: Stores Metadata |	 |		|
+-------------+		|			 |	 | Data on Disk |
			| File type		 |======>|   (usually)  |
			| Acces rights		 |	 |		|
			| Number of hardlinks	 |	 +--------------+
			| File size		 |
			| Last modified data	 |
			| Last acces date	 |
			| Where is the data	 |
			|  physically stored?	 |
			| ...			 |
			+------------------------+

How does a folder work?
+-----------+	+------------------------+	+-----------+
|  folder   |==>| Inode: Stores Metadata |	| file.txt  |
+-----------+	|			 |	|	    |
		| Access rights		 |=====>|	    |
		| Permission		 |	|	    |
		| Where is the data	 |	+-----------+
		|  physically stored?	 |
		| ...			 |
		+------------------------+
files allow us to struture the data

# files on Unix systems:
	> in linux and unix-like systems, (alomst) everything is considered a file
	> this is part of the unix philosophy
	> example:
		- ordinary file (-)
		- directories (d)
		- symbolic links (l)
		- character device (c)
		- block device (b)
		- named pipes (p)
		- sockets (s)
	> we can show the type of a file with the ls command:
		- ls -l [folder / file]
		- the type then shows up as the first character of the file columns:
			$ -rw-rw-r-- 1 [user] [user] 9019 Apr 29 11:46 document.odt

===================================

what is a symlink?
# a symlink (symbolic link) is a special kind of file on Unix systems
# purpose:
	> it serves as a reference to another file or directory
	> its a spacial way of shortcut" to another destination
# the idea:
	> we create a special file, that contains a reference to the destination path
	> this reference is being resolved on access of the symlink 
	  (or a file within it)
# how to create a symlink?
	> we can use the "ln -s" command for this
	> "ln" is a tool to make links between files
	> we can use it to create symlinks
	> example:
		-- ls -l target link
		$ ls
		$ ln -s Desktop/ abc
		$ ls
		... abc ...
		$ cd abs
		// list files/folders which are on Desktop
# how do we see if a file is a symlink
	> we can use the "ls" command:
		$ ls -l
		- if the first character is an "l", this is a symlink:
			lrwxwrwxrwx
	> other exaple:
		$ ln -s download.zip down.zip
		or
		$ ln -s /media/<user>/<sdcard>/document sd
		  (
		   made a symlink using an sd card, if you remove the sd card
		   the link will be broken
		  )

===================================

what is a hard link?
+-------------+         +------------------------+       +--------------+
|  file.txt   |========>| Inode: Stores Metadata |       |              |
+-------------+         |                        |       | Data on Disk |
| hardlink.txt|========>| File type              |======>|   (usually)  |
+-------------+         | Acces rights           |       |              |
                        | Number of hardlinks    |       +--------------+
                        | File size              |
                        | Last modified data     |
                        | Last acces date        |
                        | Where is the data      |
                        |  physically stored?    |
                        | ...                    |
                        +------------------------+
# a hardlink is adirectory entry or reference to an existing inode
# technically, the first finelname of a file is already a hardlink
# but one file can have multiple hardlinks
# thus:
	> hardlinks behave as if they were the same file
	> a hardlink can only link to files on the same filesystem
	> the filesystem must support additional hardlinks
# if delete a hardlink:
	> the other filenames /hardlinks remain intact
	> the data is only deleted if all hardlinks are removed
# how can we create a hardlink?
	> use the "ln" command (without th "-s")
	> ln target hardlink
# important hardlink cannot be created for directories (to prevent loops)
# create a hardlink:
	$ touch file.txt
	$ nano file.txt
	// add content
	$ ls
	... file.txt ...
	$ ln file.txt Desktop/message.txt
	$ nano Desktop/message.txt
	// append something and save
	$ cat file.txt
	// file.txt contant is the same as message.txt

# good for complex folder structures
	> example:
	$ mkdir Desktop/02/04; mv Dekstop/message.txt Desktop/02/04
	$ mkdir bookkeeping; mv file.txt bookkeeping

# copy files woth hard link
	> copy whole folder structure with hard links:
		-- cp -al source dest
		-- this will copy th whole source folder, and create hard links for al files!!!
		-- we will not need any additional storage for this
		-- we can now organize the files in multiple different folder
		   structures, without needing any additional disk space

	> example
		$ cp -al Desktop/ restructured
		$ cd ~
		$ ls 
		... restructured ...
















