how do users in linux work?
# different kind of users (main 3):
	> root user:
		- highest privileges
		- it has the user ID: 0
		- there can only be one root on the system
	> regular users:
		- limited privileges
		- we can allow regular users to temoprarily get toot access through sudo
	> service users:
		- for specific tasks
		- this allows us to safely run a webserver, database...
# groups:
	- all users have a primary group
	- can be assigned to zero to unlimited additional groups

managing users
# on linux, user information is stored in various files:
	> /etc/passwd
		- contains basic user account information
		- username, user ID (UID), group ID (GID), user description (full name),
		  home directory and default shell
		- readable by all users
	> /etc/shadow
		- stores encrypted user password and passwoord aging information
		- also stores additional information, such as the date of the
		  last password changes, expiry dates...
		- readable only by the root users (or users with root privileges)
	> /etc/group
		- contains information about the groups, and their members
		- readable by all users

=====================================

managing users: useradd
# to create new user
# syntax: useradd [option] username
# most important options:
	> -m: create home directory
	> -d set custom home directory
	> -s specify default shell
	> manage groups:
		>> -g: specify primary group of using the default configuration
			-- often, default configuration os that a new group will be
			   created with the same name as the username
		>> -G: add user to secodnary groups

# example:
	$ useradd -m -d /home/lauren lauren
	useradd: Permission denied.
	useradd: cannot lock /etc/passwd; try again later.
	$ sudo useradd -m -d /home/lauren lauren
	$ cat /etc/passwd
	...
	lauren:x:1002:1002::/home/lauren:/bin/sh
	$ cat etc/group
	...
	lauren:x:1002:
	$ sudo /etc/shadow
	...
	lauren:!:... (! = no password)
	ls /home/
	... lauren ...


managing users: passwd
# can set the password of users
# syntax: passwd [option] [username]
# most important options:
	> -S: display password status
	> -d: delete password
	> -n: set minimum password age (days)
	> -x: set maximum password age (days)
# can also use it to lock / unlock the account:
	> -l: lock user account
	> -u: unlock user account

# example:
	$ passwd -S
	[username] P 2025-01-24 0 99999 7 -1
	(
		[username]: username
		P: regular password
		2025-01-24: the date when have been changed
		0: 0 days since changed the password
		99999: number of days until password expires
		7: this means that I will warned 7 days before it expires
		-1: iy my password expires, I can still log in
	)
	$ sudo passwd -S lauren
	lauren L 2025-01-24 0 99999 7 -1 
	(L: password is loged)
	$ sudo passwd lauren
	New password:
	... (some information of the password stenght) ...
	Retype new password:
	passwd: pawwsord updated successfully
	-----
	log in with lauren
	-----
	$ passwd
	Changeing password for lauren.
	Current password:
	New password:
	... (some information of the password stenght) ...
	New password:
	Password change has been aborted.
	passwd: Authentication token manipulation error
	passwd: password unchanged

=====================================

password expiration?
$ sudo passwd -n 7 -x 30 lauren // should be forced to change its password every 30 days

=====================================

changing users: usermod
# can modify another user's details
# syntax: usermod [options] username
# important options:
	> -c: change user description (full name)
	> -s: change default shell
	> should really consider if we want to use those options:
		>> -d: change direction (-m to also move the existing home directory
			to the new location)
		>> -l: change username
	> manage groups:
		>> -g: change primary group
		>> -G: change secondary groups
		>> -aG: add secondary group

#example:
	$ sudo usermod -s /bin/bash -c 'Lauren M.' lauren

=====================================

delete users: userdel
# deleteing existing user
	> userdel [options] username
	> a few option:
		>> -r: removes the home directory + mails
		>> -f: removes the home directory + mails, forces the removal of the user,
			is still logged in, might also delete a group with the same name 
			as this user
			(depending on system configuration)
# exmaple:
	$ sudo useradd -m max
	$ ls /home
	... max ...
	$ sudo userdel max
	$ ls /home
	... max ...
	$ sudo rm -R /home/max
	$ sudo useradd -m max
	$ sudo userdel -r max

=====================================

groups on linux systems

# motivation: they help us to:
	> organizing users with similar access rights
	> simplify permisssino management
	> enhancing collaboration and resource sharing
	> controlling access to files and directories
	> strengthening system security
# how do groups work?
	> each user has a primary, and tero to many secondary groups
	> primary group:
		-- stored in /etc/passwd
		-- default ownership for new files
	> secodary group(s):
		-- multiple memberships allowed
		-- stored in /etc/group
		-- this allows us to give this user fine grained access rights 
		   to our system
	> can list a user's groups with the following command:
		$ groups [username]

existing groups in ubuntu:
# few existing group
# selection of the most important groups
	> root: the superuser group with administrarive priviliges, 
		allowing complete control over the system
	> sudo / wheel: members can use sudo. May also be called "wheel"
	> adm: allows memebers to read log files
	> lpadmin / lp: memebers may manage printers and print queues (CUPS)
			May also be called "lp"
	> www-data: a groups for web server processes (such as Apache or Nginx),
		    gives access to web content
	> plugdev: allows this user to manage pluggable devices 
		   (usb sticks, external HDDs ...)

=====================================

add user ti a group

# can use usermod command for this
# syntax: usermod [options] username
# manage groups:
	> -g: change primary group
	> -G: change secondary groups
	> -aG: add secondary group
# example:
	$ groups [rootuser] lauren
	... list users groups ...
	$ sudo usermod -G adm,plugdev,lpadmin lauren
	$ groups lauren
	lauren: lauren adm plugdev lpadmin
	$ sudo usermod -G amd,lpadmin lauren
	lauren: lauren adm lpadmin
	$ sudo usermod -aG plugdev lauren
	lauren: lauren adm plugdev lpadmin

# depending on the system, might also be able to use additional tools:
	> adduser [user] [group]
	> deluser [user] [group]

=====================================

how to create a group?
# use the "groupadd" command
# syntax: groupadd [options] groupname
# important option:
	> -g: options to set custom GID
# example: 
	$ groupadd -g 1005 newgroup
# the group info then stored in the /etc/group file
# other example:
	$ sudo groupadd -g 2500 myapp
	$ cat /etc/group
	...
	myapp:x:2500:

how can we change a group?
# use the "groupmod" command
# syntax: groupmod [option] groupname
# importatn option:
	> -n: change the name of the group
	> -g: change the group id (GID)
# this will update /etc/group and /etc/passwd
# example:
	$ sudo groupmod -n my-app -g 5000 myapp
	$ cat /etc/group
        ...
        my-app:x:5000:

how can we delete a group?
# use the "groupdel" command
# syntax: groupdel groupname
# important:
	> this command does not delete group-owned files
	> this command will update /etc/group and /etc/passwd
	> this will fail, if the group is the primary group of a user!
# example:
	$ sudo groupdel my-app

=====================================

switch user "su" command
# switch the user with the "su" command
# "su" stands for "switch user"
# can just enter:
	> su [other-user]
# we will have to provide the password for the other user
# and then we will be logged in as the other user!
# example:
	$ su lauren
	Password: <lauren user pass>
	/home/myuser $ ls
	ls: cannot open directory '.': Permission denied
	/home/myuser $ cd ~
	$ ls
	Desktop Documents ... Videos
	$ exit
	// go back the user as you were before
# to switch o root user:
	$ su
	Password: <root user password>
	root $ exit
	$
# can be deleted the root user password:
	$ sudo passwd -d root
	$ su
	root $ exit
	$
# can be deleted the root user password but lock it too:
	$ sudo passwd -d -l root

=====================================

Heads-up: EDITOR for visudo

Sometimes, especially on CentOS systems, visudo might 
open the text editor vi instead of nano. If this happens, 
you can quit vi by typing in :q. If this doesn't work, 
you can also just close the terminal and open a new one.

In order to change this to nano, 
we might need to set the environment variable EDITOR.

However, when using sudo, sudo will sanitise (meaning: delete) 
most environment variables for the command we're calling. 
This is great, as it improves the security - but inheriting 
the environment variable won't work:

	$ export EDITOR=nano
	$ sudo visudo

Thus, it's best to just specify the environment variable 
just after the sudo:

	$ sudo EDITOR=nano visudo

=====================================

the "sudo command in linux
# sudo stands for "superuser do"
# it gives us temporary privileges of another user - by default from the root user
# it thus executes commands with elevated / changed permission
# requires user authentication (with the user's password)
# the user must be allowed to use "sudo"

configuring sudo access
# how do we allow a user to use sudo?
	> those are configured in the file /etc/sudoers
	> we shpuld only use the visudo command to safely edit this file!
		$ sudo visudo /etc/sudoers	// if not change anything and quit
		visudo: /etc/sudoers.tmp unchanged
	> example, gives the user full sudo access:
		<your-user> ALL=(ALL:ALL) ALL
	> exmaple, gives the group <your-group> full sudo access:
		%<your-group> ALL=(ALL:ALL) ALL
	
	> we could also use a group to enable sudo access:
		>> group: sudo
		>> usermod -aG sudo <your-user>
		>> on other system, this group moght also be called "wheel"

using sudo in the terminal
# how can we use sudo in the terminal?
	> we can just prefix the command with "sudo"
	> example: (ubuntu/debian):
		$ sudo apt-get update
			or
		$ sudo dnf update
	> we then need to enter our user password
	> "sudo" will be stored in a session (by default: 15 minutes)
	> we can expire the session with the command "sudo -k"
	> or we also start a shell with additional privileges: "sudo -s"

=====================================

changing privileges: sudo intro different user

# we can also use "sudo" to start a program as a different user:
	> sudo -u [user] -g [group]
	> example:
		$ sudo -u <other-user> bash
		> this would start the program "bash" as the user lauren

		$ sudo -u lauren
		...
		$ sudo -u lauren touch /home/lauren/file-sudo.txt
		[sudo] password for <your-user>: 
		// command has been executed!!!

=====================================

advanced sudo: /etc/sudoers
# what does this line mean?
	> <your-user> ALL=(ALL:ALL) ALL
		>> <your-user>: the username, this rule should be applied to this user
		>> ALL: the hostname that this rule should apply to
		>> (ALL:ALL): the run configuration
			- the first ALL: the user that the user <your-user> can sudo into
			- the second ALL: the group that the user <your-user> can 
					sudo into
			-  if we dont specify this, we can only sudo into the root user
		>> ALL: the command specification, ALL means any command
	> sudo without password?
		>> we can also specify "NOPASSWD:", to allow sudo wothout a password
		(potential security risk!!!):
		>> <your-user> ALL=(ALL:ALL) NOPASSWD: ALL
		
# we can also just allow specific progrmas:
	$ <your-user> ALL= NOPASSWD: /usr/bin/apt-get
	> this would give <your-user> access to only the program apt-get
	> this might also be a security issue:
		>> i could also remove any program I want
		>> i could install any program I want
		>> some og those programs might start a service that runs in
		   the background... and executes files
		>> those then might be executed with additional priviliges

=====================================

file permissions on linux
# why do we need file permissions?
	> control access to files and directories
	> determine who can read, write and execute those files
	> there is 3 important levels of permission:
		>> owner (u)
		>> group (g)
		>> others (o)
# example:
	$ ls file.txt
	$ ls -al file.txt
	-rw-rw-r-- 1 <your-user> <your-group> 0 Feb 13 15:19 file.txt

# type of permissions:
	> read (r / 4): allows viewing file contents listing directory contents
	> write (w / 2): allows modifying file contents or creating / deleting diles in
			 directory
	> execute (x / 1): allows running a file a program or changing into this directory

# premission levels: owner (u), group (g), others (o)
# type of permissions: read (r / 4), write (w / 2), execute (x / 1)
# how do we assign permission to a file?
	> we can use the "chmod" command for this
	> example:
		$ chmod u+x file.txt
		>> would give the owner (u) executable rights
		$ chmod g-w file.txt
		>> would remove the write permission for the groups (g)
		$ chmod o+r file.txt
		>> would give other users (o) read access to this file or directory
# example:
	$ sudo touch sudo_file.txt
	[sudo] password for <your-user>:
	$ ls -al sudo_file.txt 
	-rw-r--r-- 1 root root 0 Feb 13 15:27 sudo_file.txt
	$ cat sudo_file.txt
	$ nano sudo_file.txt
	// its open, but the file is unwriteable
	$ sudo chmod o+w sudo_file.txt
	$ nano sudo_file.txt
	// edit it something
	$ cat sudo_file.txt
	test
	$ ls -al sudo_file.txt 
	-rw-r--rw- 1 root root 5 Feb 13 15:32 sudo_file.txt

# changing owner / group of a file
	> we can also change the owner / group of a file:
		>> chown user: group file.txt
		>> this sets the owner to "user", and the group to "group"
	> example:
		$ sudo chmod o-w sudo_file.txt
		$ ls -al sudo_file.txt 
		-rw-r--r-- 1 root root 5 Feb 13 15:32 sudo_file.txt
		$ sudo chown root:<your-user> sudo_file.txt
		$ ls -al sudo_file.txt 
		-rw-r--r-- 1 root <your-user> 5 Feb 13 15:32 sudo_file.txt 
		$ sudo chmod g+w sudo_file.txt
		$ ls -al sudo_file.txt
		-rw-rw-r-- 1 root <your-user> 5 Feb 13 15:32 sudo_file.txt
		$ nano sudo_file.txt
		// change something
		$ cat sudo_file.txt
		test!

=====================================

file permission: chmod 777

chmod with numeric values:
# premission levels: owner (u), group (g), others (o)
# type of permissions: read (r / 4), write (w / 2), execute (x / 1)
# how do we assign persmission to a file?
	> can use the "chmod" command for this
	> examples:
		$ chmod 754 file.txt
		>> first digit is for the owner: 7 = 4 + 2 + 1 => read, write, execute
		>> second digit is for the group: 5 = 4 + 1 => read, execute
		>> third digit is for all others: 4 => read

# example:
	$ ls -al sudo_file.txt 
	-rw-rw-r-- 1 root <your-user> 6 Feb 13 15:38 sudo_file.txt
	$ sudo chmod 777 sudo_file.txt 
	[sudo] password for <your-user>:
	$ ls -al sudo_file.txt 
	-rwxrwxrwx 1 root <your-user> 6 Feb 13 15:38 sudo_file.txt

=====================================

how do file permission work for directoryies?
# read (r): access directory content
# write (w): add or remove files
	> (we also need execute permisssions for this though)
# execute (x): enter and traverse directory
# example:
	$ mkdir website
	$ nano website/index.html
	// edit something
	$ cat index.html
	<h1>This is az example for 158th video</h1>
	$ ls -al
	...
	drwxr-xr-x. 1 <your-user> <your-group>  20 Feb 15 11:16 website
	$ chmod 000 website/
	$ cd website/
	bash: cd: website/: Permission denied
	$ ls website/
	ls: cannot open directory 'website/': Permission denied
	$ touch website/page2.html
	touch: cannot touch 'website/page2.html': Permission denied
	$ chmod u+w website/
	$ ls website/
	ls: cannot open directory 'website/': Permission denied
	$ cd website/
	bash: cd: website/: Permission denied
	$ touch website/page2.html
	touch: cannot touch 'website/page2.html': Permission denied
	$ chmod u+x website/
	$ touch website/page2.html
	$ ls website/
	ls: cannot open directory 'website/': Permission denied
	$ cd website
	website $ ls
	ls: cannot open directory '.': Permission denied
	website $ nano page2.html
	// you can edit the file
	website $ cd ..
	$ ls -al 
	...
	d-wx------. 1 <your-user> <your-group>  40 Feb 15 11:23 website
	$

changing permission
# if we want to change permission / ownership for a whole directory structure...
# ... we can use the paramter -R:
	> chown <other-user>:<other-group> -R ./directory
	> chmod 777 -R ./directory

# exmaple:
	$ chmod 777 -R wensite
	$ ls -al website
	total 4
	drwxrwxrwx. 1 <your-user> <your-group> 40 Feb 15 11:23 .
	drwxr-xr-x. 1 <your-user> <your-group> 56 Feb 15 11:15 ..
	-rwxrwxrwx. 1 <your-user> <your-group> 44 Feb 15 11:16 index.html
	-rwxrwxrwx. 1 <your-user> <your-group>  0 Feb 15 11:23 page2.html
	$ sudo chown <your-user>:<other-group> -R website/
	[sudo] password for <your-user>:
	$ ls -al website
        total 4
        drwxrwxrwx. 1 <your-user> <other-group> 40 Feb 15 11:23 .
        drwxr-xr-x. 1 <your-user> <your-group> 56 Feb 15 11:15 ..
        -rwxrwxrwx. 1 <your-user> <other-group> 44 Feb 15 11:16 index.html
        -rwxrwxrwx. 1 <your-user> <other-group>  0 Feb 15 11:23 page2.html

=====================================

advanced file permission: umask

why do we need a umask?
# the "umask" allows us to specify who should be able to access new files
# thus, this is an important security feature
# if you're the sysadmin, you might want to evaluate this, and se which value
# is most appropriate for the "umask" in your organization

# the idea:
	> it thus determines the default permission for new files / directories
# how does it work?
	> we have some base permissions
	> and from those, we subtract the umask value (technically: we apply a bitmask
	  accordiing to the binary representation of our umask value)
	> base permission are usually:
		>> 777 for directories, 666 for files
	> if we set the umask to 022:
		>> directories will have 755
			-- owner: read + write + execute
			-- group and others: read + execute (but not write)
		>> and files wll be 644:
			-- owner: read + write
			-- group and others: read (but not execute + write)

# example:
	$ umask
	0022

how to change umask?
# how can we change the umask value?
	> temorarily change it (shell session)
		>> umask [new mask]
	> exmaple:
		$ umask 022
		0022
		$ touch umaks.txt
		$ ls -l umaks.txt
		$ ls -l umask.txt 
		-rw-r--r--. 1 <your-user> <your-group> 0 Feb 15 12:04 umask.txt
		// owner can read and write, gourp only read, other only read
		$ umask 026
		$ touch umask2.txt
		-rw-r-----. 1 <your-user> <your-group> 0 Feb 15 12:06 umask2.txt
		// owner can read and write, group can read, other cant do anything!
	> permanently change it (for shell):
		>> we can add the umask command to one of the startup file our bash
		   (exmaple: ~/.bashrc)
	> permanently change it (for all programs):
		>> ususally, we can edit this in the following file:
			-- /etc/login.defs
		>> this should then also affect new GUI sessions
		>> be aware:
			-- changes umask command in a shell overwrite this for the current shell session
			-- those changes should usually applied autamtically during
			   startup -if a new shell doesn't pisk them ip, be sure to make sure
			   the umask is not overwritten during startup of the shell
	> example:
		$ sudo ls /etc/ | grep -F log
		...
		login.defs
		...
		$ sudo nano /etc/login.defs
		// ctrl+w than write umask, you can change umask value to 027 (to increased privacy)
		// and restart the system

=====================================

advanced file permission: stricky bit
# the stick bit is an extra bit that we can set for all files or directories
# it has different meaning:
	> for files:
		>> obolete, no longer used
		>> it used to indicate that an executable file can remain in memory,
		   to be loaded more quickly on next launch
	> for directories:
		>> without the sticky bit, any user with write + execute
		   permission for a directory can rename / delete files in it
		>> if the sticky bit set, only the owner (and root) of file or the
		   the directory owner can rename or delete a file
# the sticky bit is especially used for the "/tmp" folder
# example:
	$ cd /
	// go to the root folder
	/ $ sudo mkdir /data
	[sudo] password for <your-user>:
	/ $ ls -al
	...
	drwxr-xr-x 2 root       root       4096 Feb 17 13:44 data
	...
	/ $ sudo chmod 777 /data
	/ $ sudo chown <your-user>:<your-group> /data
	/ $ ls -al
	...
	drwxrwxrwx 2 <your-user> <your-group> 4096 Feb 17 13:44 data
	...
	/ $ cd data
	/data $ touch file.txt
	/data $ ls
	file.txt
	/data $ ls -al
	...
	-rw-rw-r-- 1 <your-user> <your-group>    0 Feb 17 13:49 file.txt
	/data $ chmod 660 file.txt
	/data $ ls -al
	...
	-rw-rw---- 1 <your-user> <your-group>    0 Feb 17 13:49 file.txt

# how can we set the sticky bit?
	> chmod +t [folder]
	> or in octal notation:
		>> set sticky bit: chmod 1777 [folder]
		>> inset sticky bit: chmod 0777 [folder]
# how can we inspect the sticky bit?
	> we can use the "ls -l" command for this:
		>> ls -l
	> if the sticky bit is set:
		>> if the file / directory also nas executable permission for others:
			-- last character will be a "t"
		>> otherwise, the last character will be a "T"
		>> example:
			/ $ ls -al
			...
			dr-xr-xr-x  13 root root          0 Feb 17 06:14 sys
			drwxrwxrwt  36 root root       4096 Feb 17 13:54 tmp
			drwxr-xr-x  12 root root       4096 Aug 27 17:37 usr
			...

=====================================











